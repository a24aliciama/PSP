DU3 - Exercise 6 - Multi threaded client-server app - Guess a number game

We want to create a client-server application where the client tries to guess a random number generated by the server.

The client uses several commands to communicate with the server.

The commands to use are the following:

NEW. This command indicates that the client wants to start a new game. As an argument it accept the number of tries the user want to have to guess the number. Example: NEW 8
NUM. The client sends its guess to the server. A new game has to be created before using this command. Example: NUM 42.
HELP. The client asks the server for information about the game and the commands to use.
QUIT. The client sends the request to terminate the communication with the server.


The server sends two-digit responses to the client to inform it of its requests.

The server responses are the following:

10 Number game server ready. Indicates that the server is ready to receive request from the client.
11 BYE. Indicates that the communication with the client is going to be closed.
15 Number game server ready. Indicates that the server is ready to begin a new game after a communication error has been detected.
20 PLAY <numOp>. Indicates that the game starts and the client has numOp attemps.
25 LOW <numOp>. Indicates that the client's guess is lower than the number to be guessed.
35 HIGH <numOp>. Indicates that the client's guess is higher than the number to be guessed.
40 INFO. Informs the client about the game.
50 WIN. Indicates that the client has guessed the number exactly.
70 LOSE NUM <numGuess>. Indicates that the client has no more attempts to guess the number and informs the client of the number to guess.
80 ERR. The command used by the client cannot be used at this time.
90 UNKNOWN. The command used by the client is incorrect.





DU3 - Ejercicio 6 - Aplicación cliente-servidor multiproceso - Juego de adivinar un número

Queremos crear una aplicación cliente-servidor donde el cliente intenta adivinar un número aleatorio  generado por el servidor .

El cliente utiliza varios comandos para comunicarse con el servidor .

Los comandos a utilizar son los siguientes:

NUEVO . Este comando indica que el cliente desea iniciar un nuevo juego. Como argumento acepta el número de intentos que el usuario desea tener para adivinar el número. Ejemplo: NUEVO 8
NUM . El cliente envía su conjetura al servidor. Se debe crear un nuevo juego antes de utilizar este comando. Ejemplo: NUM 42.
AYUDA . El cliente solicita al servidor información sobre el juego y los comandos a utilizar.
QUIT . El cliente envía la solicitud para finalizar la comunicación con el servidor.


El servidor envía respuestas de dos dígitos al cliente para informarle de sus solicitudes.

Las respuestas del servidor son las siguientes:

10 Número de servidor de juego listo . Indica que el servidor está listo para recibir la solicitud del cliente.
11 BYE . Indica que se va a cerrar la comunicación con el cliente.
15 Número de servidor de juego listo . Indica que el servidor está listo para comenzar un nuevo juego después de que se haya detectado un error de comunicación.
20 PLAY <numOp> . Indica que el juego comienza y que el cliente tiene numOp intentos.
25 LOW <numOp> . Indica que la estimación del cliente es menor que el número que se debe estimar.
35 HIGH <numOp> . Indica que la estimación del cliente es mayor que el número que se debe estimar.
40 INFO . Informa al cliente sobre el juego.
50 WIN . Indica que el cliente ha adivinado el número con exactitud.
70 LOSE NUM <numGuess> . Indica que el cliente no tiene más intentos para adivinar el número e informa al cliente cuál es el número que debe adivinar.
80 ERR . El comando utilizado por el cliente no se puede utilizar en este momento.
90 DESCONOCIDO . El comando utilizado por el cliente es incorrecto.